# -*- coding: utf-8 -*-
"""2차 프로젝트.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10aLppmK-SXt4NBVdhkSC_j6PatTAKkk6
"""

import pandas as pd
import numpy as np

data = pd.read_csv("/content/Train.csv")

data_worst = data[data['Customer_rating']<3.0]
data_worst_not = data[data['Customer_rating']>3.0]

data_new['discount_category'] = pd.cut(data_new['discount'],[0,3,6,9,12,15,18,21,24,100] ,
                                       labels = ['~3','3-6','6-9','9-12','12-15','15-18','18-21','21-24','-100'])

data_new['cost_category'] = pd.cut(data_new['Cost_of_the_Product'],[0,50,100,150,200,250,300,400] ,
                                 labels = ['-50','50-100','100-150','150-200','200-250','250-300','300-'])

data_new = data
data_new['discount'] = data['Discount_offered']/data['Cost_of_the_Product']*100
data_new.info()

data_new['weight_category'] = pd.cut(data_new['Weight_in_gms'],[0,1000,2000,3000,4000,5000,7000],
                                     labels = ['-1000','1000-2000','2000-3000','3000-4000','4000-5000','5000~'])

worst_cor = data_worst[data_worst['Reached.on.Time_Y.N'] == 1]
worst_not = data_worst[data_worst['Reached.on.Time_Y.N'] == 0]

data.describe()

data_new['cost_category'].value_counts(sort = False)

data_new.describe(include = 'all')

data.columns

data_worst_not.info()

import matplotlib.pyplot as plt
# 범주를 나누는 작업을 수행합니다.

# data_new.loc[data_new['discount'] < 5, 'discount_category'] = 'under 5%'
# data_new.loc[(data_new['discount'] >= 5) & (data_new['discount'] < 10), 'discount_category'] = '5%~10%'
# data_new.loc[(data_new['discount'] >= 10) & (data_new['discount'] < 15), 'discount_category'] = '10%~15%'
# data_new.loc[data_new['discount'] >= 15, 'discount_category'] = '15%~20%'

data_new['discount_category'] = pd.cut(data_new['discount'],[0,3,6,9,12,15,100] ,
                                       labels = ['~3','3-6','6-9','9-12','12-15','-100'])
data_new['discount_category'].value_counts()
data_new.loc[data_new['discount']>7]
# data_new['discount_category'] = 0

plt.figure(figsize=(4, 5))
plt.bar(data_new['discount_category'].value_counts(sort = False).index,
        data_new['discount_category'].value_counts(sort = False),
        align='center', alpha=0.7, color='blue')
plt.xticks(data_new['discount_category'].value_counts().index)
plt.ylabel('freq')
plt.title('dis_category')
plt.show()



# data_new['discount_category'] = pd.cut(data_new['discount'],[0,6,12,18,24,30,100] ,
#                                        labels = ['1','2','3','4','5','6'])
# data_new['discount_category'].value_counts()
# data_new.loc[data_new['discount']>7]
# # data_new['discount_category'] = 0

# plt.figure(figsize=(4, 5))
# plt.bar(data_new['discount_category'].value_counts(sort = False).index,
#         data_new['discount_category'].value_counts(sort = False),
#         align='center', alpha=0.7, color='blue')
# plt.xticks(data_new['discount_category'].value_counts().index)
# plt.ylabel('freq')
# plt.title('dis_category')
# plt.show()

data_new['weight_category'].value_counts(sort = False)

count = data_new['weight_category'].value_counts(sort = False)

plt.figure(figsize=(7,3))
plt.bar(count.index, count, color = ['r','g','blue','purple','gold','orange','cyan','brown'],alpha = 0.3)
plt.xticks(count.index)
plt.title('weight_category')
plt.ylabel('freq')
plt.show()

# Mode_of_Shipment 칼럼 값에 따른 빈도 계산
count = data['Reached.on.Time_Y.N'].value_counts(sort = False)

plt.figure(figsize=(2,3))
plt.bar(count.index, count, color = ['r','g','blue','purple','gold','orange','cyan','brown'],alpha = 0.3)
plt.xticks(count.index)
plt.title('Reached.on.Time_Y.N')
plt.ylabel('freq')
plt.show()

#importance high의 특징을 알아보기 위한 데이터 새롭게 생성

data_call_low = data_new[data_new['Customer_care_calls'] < 4]
data_call_high = data_new[data_new['Customer_care_calls'] > 4]
data_import_low = data_new[data_new['Product_importance'] == 'low']
data_import_high = data_new[data_new['Product_importance'] == 'high']
data_imp_high_dis_low = data_new[(data_new['Product_importance'] == 'high') & (data_new['discount_category'] != '-100')]
data_imp_high_dis_high = data_new[(data_new['Product_importance'] == 'high') & (data_new['discount_category'] == '-100')]
data_new.describe(include = 'all')

print(data_call_low['Prior_purchases'].mean())
print(data_call_high['Prior_purchases'].mean())

data_import_high.info()

count = data_call_high['discount_category'].value_counts(sort = False)

plt.figure(figsize = (6,3))
plt.bar(count.index, count, color = ['r','g','blue','purple','gold','orange','cyan','brown'],alpha = 0.3)
plt.xticks(count.index)
plt.title('discount_category')
plt.ylabel('freq')
plt.show()

count = data_call_low['discount_category'].value_counts(sort = False)

plt.figure(figsize = (6,3))
plt.bar(count.index, count, color = ['r','g','blue','purple','gold','orange','cyan','brown'],alpha = 0.3)
plt.xticks(count.index)
plt.title('discount_category')
plt.ylabel('freq')
plt.show()

print(data_call_low['Cost_of_the_Product'].mean())
print(data_call_high['Cost_of_the_Product'].mean())

x = data_call_low[data_call_low['Cost_of_the_Product']>230]
count = x['discount_category'].value_counts(sort = False)

plt.figure(figsize = (6,3))
plt.bar(count.index, count, color = ['r','g','blue','purple','gold','orange','cyan','brown'],alpha = 0.3)
plt.xticks(count.index)
plt.title('discount_category')
plt.ylabel('freq')
plt.show()

data_call_low.describe()

pd.DataFrame(data_new['Customer_rating'].describe())

#그래프 두개 그리기

# Get value counts for low and high data
count_low = data_call_low['discount_category'].value_counts(sort=False)
count_high = data_call_high['discount_category'].value_counts(sort=False)

# Set up the figure
plt.figure(figsize=(10, 5))

# Plot low data
plt.bar(count_low.index, count_low, color='red', alpha=0.3, label='Call Low Data')

# Plot high data with a slight shift in x position to avoid overlap
plt.bar(count_high.index, count_high, color='blue', alpha=0.2, label='Call High Data')

# Customize the plot
plt.xticks(count_low.index)
plt.title('Discount')
plt.ylabel('Frequency')
plt.legend()

# Show plot
plt.show()

count = data_import_high['Customer_care_calls'].value_counts(sort = False)

plt.figure(figsize = (4,3))
plt.bar(count.index, count, color = ['r','g','blue','purple','gold','orange','cyan','brown'],alpha = 0.3)
plt.xticks(count.index)
plt.title('Customer_care_calls')
plt.ylabel('freq')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 데이터프레임 생성
df1 = pd.DataFrame(data_worst)
df2 = pd.DataFrame(data_worst_not)

# 데이터프레임 별로 'Reached.on.Time_Y.N' 칼럼 값에 따른 빈도 계산
worst_counts = df1['Mode_of_Shipment'].value_counts()
worst_not_counts = df2['Mode_of_Shipment'].value_counts()

# 파이 차트를 그리기 위한 subplot 생성
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

# 첫 번째 데이터프레임에 대한 파이 차트 그리기
axes[0].pie(worst_counts, labels=worst_counts.index, autopct='%1.1f%%', startangle=140)
axes[0].set_title('bad_shipment')

plt.rc('font', size=20)

# 두 번째 데이터프레임에 대한 파이 차트 그리기
axes[1].pie(worst_not_counts, labels=worst_not_counts.index, autopct='%1.1f%%', startangle=140)
axes[1].set_title('good_shipment')

plt.tight_layout()  # 서브플롯 간 간격 조정
plt.show()

worst_counts = df1['Prior_purchases'].value_counts()
worst_not_counts = df2['Prior_purchases'].value_counts()

# 파이 차트를 그리기 위한 subplot 생성
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

plt.rc('font', size=15)

# 첫 번째 데이터프레임에 대한 파이 차트 그리기
axes[0].pie(worst_counts, labels=worst_counts.index, autopct='%1.1f%%', startangle=140)
axes[0].set_title('bad_warehouse')

# 두 번째 데이터프레임에 대한 파이 차트 그리기
axes[1].pie(worst_not_counts, labels=worst_not_counts.index, autopct='%1.1f%%', startangle=140)
axes[1].set_title('good_warehouse')

plt.tight_layout()  # 서브플롯 간 간격 조정
plt.show()

import matplotlib.pyplot as plt

# Define bins for histogram
bins = range(0, int(max(df1['Cost_of_the_Product'])) + 10, 10)  # Adjust bin width as needed

# Plot histograms for the first dataframe
plt.figure(figsize=(6, 3))
plt.hist(df1['Cost_of_the_Product'], bins=bins, color='b', alpha=0.7)
plt.title('Bad Cost of Product')
plt.xlabel('Cost')
plt.ylabel('Frequency')


plt.figure(figsize=(6, 3))
# Plot histograms for the second dataframe
plt.hist(df2['Cost_of_the_Product'], bins=bins, color='r', alpha=0.7)
plt.title('Good Cost of Product')
plt.xlabel('Cost')
plt.ylabel('Frequency')

plt.tight_layout()  # Adjust subplot spacing
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 데이터프레임 생성
df = pd.DataFrame(data)

# 제품 가격에 따른 만족도의 평균 계산
mean_rating_by_cost = df.groupby('Cost_of_the_Product')['Customer_rating'].mean()

# 선 그래프 그리기
plt.figure(figsize=(10, 6))
plt.plot(mean_rating_by_cost.index, mean_rating_by_cost.values, marker='o', linestyle='-')
plt.title('Mean Customer Rating by Cost of the Product')
plt.xlabel('Cost of the Product')
plt.ylabel('Customer_rating')
plt.grid(True)
plt.show()

worst_counts = df1['Prior_purchases'].value_counts()
worst_not_counts = df2['Prior_purchases'].value_counts()

# 파이 차트를 그리기 위한 subplot 생성
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

# 첫 번째 데이터프레임에 대한 파이 차트 그리기
axes[0].pie(worst_counts, labels=worst_counts.index, autopct='%1.1f%%', startangle=140)
axes[0].set_title('bad_Prior')

# 두 번째 데이터프레임에 대한 파이 차트 그리기
axes[1].pie(worst_not_counts, labels=worst_not_counts.index, autopct='%1.1f%%', startangle=140)
axes[1].set_title('good_Prior')

plt.tight_layout()  # 서브플롯 간 간격 조정
plt.show()

worst_counts = df1['Product_importance'].value_counts()
worst_not_counts = df2['Product_importance'].value_counts()

# 파이 차트를 그리기 위한 subplot 생성
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

plt.rc('font', size=20)

# 첫 번째 데이터프레임에 대한 파이 차트 그리기
axes[0].pie(worst_counts, labels=worst_counts.index, autopct='%1.1f%%', startangle=140)
axes[0].set_title('bad_Product_imnportance')

# 두 번째 데이터프레임에 대한 파이 차트 그리기
axes[1].pie(worst_not_counts, labels=worst_not_counts.index, autopct='%1.1f%%', startangle=140)
axes[1].set_title('good_Product_imnportance')

plt.tight_layout()  # 서브플롯 간 간격 조정
plt.show()

worst_counts = df1['Product_importance'].value_counts()
worst_not_counts = df2['Product_importance'].value_counts()

# 파이 차트를 그리기 위한 subplot 생성
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

# 첫 번째 데이터프레임에 대한 파이 차트 그리기
axes[0].pie(worst_counts, labels=worst_counts.index, autopct='%1.1f%%', startangle=140)
axes[0].set_title('bad_Product_imnportance')

# 두 번째 데이터프레임에 대한 파이 차트 그리기
axes[1].pie(worst_not_counts, labels=worst_not_counts.index, autopct='%1.1f%%', startangle=140)
axes[1].set_title('good_Product_imnportance')

plt.tight_layout()  # 서브플롯 간 간격 조정
plt.show()

worst_counts = df1['Gender'].value_counts()
worst_not_counts = df2['Gender'].value_counts()

# 파이 차트를 그리기 위한 subplot 생성
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

# 첫 번째 데이터프레임에 대한 파이 차트 그리기
axes[0].pie(worst_counts, labels=worst_counts.index, autopct='%1.1f%%', startangle=140)
axes[0].set_title('bad_Gender')

# 두 번째 데이터프레임에 대한 파이 차트 그리기
axes[1].pie(worst_not_counts, labels=worst_not_counts.index, autopct='%1.1f%%', startangle=140)
axes[1].set_title('good_Gender')

plt.tight_layout()  # 서브플롯 간 간격 조정
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 데이터프레임 생성
df = pd.DataFrame(data)

# 제품 가격에 따른 만족도의 평균 계산
mean_rating_by_cost = df.groupby('Discount_offered')['Discount_offered'].mean()

# 선 그래프 그리기
plt.figure(figsize=(10, 6))
plt.plot(mean_rating_by_cost.index, mean_rating_by_cost.values, marker='o', linestyle='-')
plt.title('Mean Customer Rating by Cost of the Product')
plt.xlabel('Discount_offered')
plt.ylabel('Customer_rating')
plt.grid(True)
plt.show()

worst_counts = df1['Reached.on.Time_Y.N'].value_counts()
worst_not_counts = df2['Reached.on.Time_Y.N'].value_counts()

# 파이 차트를 그리기 위한 subplot 생성
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

# 첫 번째 데이터프레임에 대한 파이 차트 그리기
axes[0].pie(worst_counts, labels=worst_counts.index, autopct='%1.1f%%', startangle=140)
axes[0].set_title('bad_Reached.on.Time_Y.N')

# 두 번째 데이터프레임에 대한 파이 차트 그리기
axes[1].pie(worst_not_counts, labels=worst_not_counts.index, autopct='%1.1f%%', startangle=140)
axes[1].set_title('good_Reached.on.Time_Y.N')

plt.tight_layout()  # 서브플롯 간 간격 조정
plt.show()

y = data['Warehouse_block'].value_counts()
x = data['Warehouse_block'].value_counts().index

plt.figure(figsize=(6, 3))
plt.bar(x, y, alpha=0.5, color='blue')
plt.xticks(x)
plt.ylabel('Freq')
plt.title('Warehouse')
plt.show()

plt.figure(figsize = (10,5))

w = 0.25
plt.bar(index - w, df[''])

import matplotlib.pyplot as plt
import seaborn as sns

# 예시 데이터 생성

# 데이터 프레임 생성 (데이터 프레임을 사용하지 않을 경우 생략 가능)
data = {'discount_category': discount_category, 'cost_category': cost_category}

# 산점도 그리기
sns.scatterplot(x='cost_category', y='discount_category', data=data)

# 그래프 제목 추가
plt.title('Discount vs Cost Categories')

# X축 제목 추가
plt.xlabel('Cost Category')

# Y축 제목 추가
plt.ylabel('Discount Category')

# 그래프 표시
plt.show()

